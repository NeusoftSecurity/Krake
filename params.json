{"tagline":"Krake provides health monitor functionality for servers. ","name":"Krake","body":"Krake\r\n=====\r\n\r\nKrake provides health monitor functionality for servers. \r\n\r\n\r\nOverview\r\n--------\r\n\r\nKrake is a health monitor which can check the server's health status.\r\n\r\nFeature List:\r\n* Support health monitoring in:\r\n * ICMP\r\n * TCP\r\n * HTTP/HTTPS\r\n* Support callback mechanism that can call user-specified scripts/commands to notify the health status\r\n* Support writing logs into syslog or file\r\n\r\nKrake runs as a daemon and can be configured by a xml styled configuration file.\r\nKrake can run in most Unix like environment, incl. Linux and xBSD.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nRequires:\r\n* libevent2\r\n* libmnl\r\n\r\nRead the INSTALL file in the source code tree.\r\n\r\n\r\nGeneral Usage\r\n-------------\r\n\r\nThe krake daemon supports the following options:\r\n\r\n        --config/-c             Assign the configruation file\r\n        --reload/-r             Reload the configruation file\r\n        --show/-s               Show health status, -s all for all monitor, -s monitor_name for one monitor\r\n        --quit/-q               Shutdown krake\r\n        --version/-v            Show Krake version\r\n        --help/-h               Show this help\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\nDefault configuration file: $prefix/etc/krake.conf, the $prefix refers to the parameter passed to configure script while \r\ncompile the source code.\r\n\r\nExample:\r\n\r\n        <?xml version=\"1.0\"?>\r\n        <krk_config>\r\n                <monitor>                               <!--Keyword for krake configuration, monitor can more than one-->\r\n                        <name>monitor1</name>               <!--name of a monitor-->\r\n                        <status>enable</status>             <!--Only can be enable or disable; \r\n                                                            when enable, also starts the monitor's timer;\r\n                                                            when disable, also stops the monitor's timer-->\r\n                        <checker>http</checker>             <!--specify a checker using by a monitor-->\r\n                        <checker_param>send-file:\"~/request\" \r\n                                expected-file:\"~/response\"</checker_param>    <!--checker's parameters, see below-->\r\n                        <interval>5</interval>              <!--interval of monitor's timer in seconds-->\r\n                        <timeout>3</timeout>                <!--time out value of checked host in seconds-->\r\n                        <failure_threshold>3</failure_threshold>            <!--how many times of failures happen, marking host as down-->\r\n                        <success_threshold>3</success_threshold>            <!--how many times of successes happen, marking host as up-->\r\n                        <node>\r\n                                <host>10.1.1.2</host>               <!--ip address of a checked host, either ipv4 address is valid-->\r\n                                <port>8080</port>                   <!--port number of a checked host, range is 1 ~ 65535-->\r\n                        </node>\r\n                        <node>\r\n                                <host>10.1.1.3</host>               <!--ip address of a checked host, either ipv4 address is valid-->\r\n                                <port>8080</port>                   <!--port number of a checked host, range is 1 ~ 65535-->\r\n                        </node>\r\n                        <script>~/notifier.sh</script>              <!--failure notification, if user specify this option,\r\n                                                              when a failure of a checked host is deteceted, krake will call this script-->\r\n                </monitor>\r\n                <log>                               <!--set logging attributes-->\r\n                        <logtype>syslog</logtype>       <!--set the type of logs that krake sends, value can be file, syslog-->\r\n                        <loglevel>notice</loglevel>          <!--set the level of logs, under which the logs will not be sent out-->\r\n                </log>\r\n        </krk_config>\r\n\r\nIf don't want to use this file, you can assign another xml file by krake command line\r\n\r\nAfter you make some modifications to the configuration file, you can use \"krake -r\" to force the daemon reload the \r\nconfiguration file without stopping the current detection.\r\n\r\n\r\nConfiguration of the Checkers\r\n-----------------------------\r\n\r\nAt current stage, only http checker has the checker parameters.\r\n\r\n    http checker:\r\n        \r\n        <checker-param>send-file:\"/path/to/a/file\" expected-file:\"/path/to/a/file\"</checker-param>\r\n\r\n    This let you to specify what to send and what to expected to receive when you use the http checker.\r\n    You can write the http packet into a send file and tell Krake what to send.\r\n\r\n    If these parameters are missing, then Krake will send a minimum http request packet as:\r\n        GET / HTTP/1.0\r\n        Host: test\r\n        Connection: Close\r\n\r\n    and expect only the 200 status of the http response.\r\n    http checker now only supports HTTP 1.0 protocol.\r\n\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}